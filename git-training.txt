1. GIT là gì. Vai trò của git.
- Khái niệm: Git là một hệ thống quản lý phiên bản phân tán (có tên tiếng anh là Distributed Version Control System – DVCS) được ra đời vào năm 2005 hiện đang được sử dụng vô cùng phổ biến. Git cung cấp cho mỗi một lập trình viên kho lưu trữ riêng cho toàn bộ lịch sử thay đổi. 
- Vai trò của git: 
	+ Lưu lại những phiên bản khác nhau của mã nguồn dự án phần mềm. 
	+ Khôi phục lại các mã nguồn từ một phiên bản bất kỳ khác. 
	+ Hỗ trợ so sánh dễ dàng hơn giữa các phiên bản. 
	+ Phát hiện được những vị trí, những phần mà người khác đã chỉnh sửa làm phát sinh lỗi. 
	+ Khôi phục lại những tập tin đã bị mất đi. 
	+ Thử nghiệm và mở rộng các tính năng của dự án một cách dễ dàng mà không làm ảnh hưởng đến các phiên bản chính. 
	+ Hỗ trợ phối hợp thực hiện dự án trong một nhóm mang lại nhiều hiệu quả hơn. 
	+ Git đảm bảo không có xung đột code giữa các lập trình viên trong một nhóm. 
	+ Chỉ cần có clone mã nguồn từ kho chứa hoặc clone một phiên bản thay đổi nào đó từ kho chứa hoặc một nhánh nào đó từ kho chứa là lập trình viên có thể bắt tay vào làm việc mọi lúc mọi nơi.
2. Cách tạo 1 repository.
- Repository là nơi quản lý, lưu trữ tất cả mọi thông tin cần thiết cũng như các sửa đổi và lịch sử sửa đổi của toàn bộ dự án. 
- Cách tạo: 
 + Trước tiên bạn cần đăng nhập vào Github, sau đó ấn vào dấu + trên menu và chọn New repository. 
 + Bạn sẽ cần đặt tên cho kho chứa của bạn. Bạn có thể chọn loại kho chứa là Public (ai cũng có thể clone) và Private (chỉ có những người được cấp quyền mới có thể clone).
 + Khi tạo xong nó sẽ dẫn bạn tới trang hướng dẫn làm việc với kho chứa vừa tạo. Và kho chứa của bạn bây giờ sẽ có địa chỉ là https://github.com/$user-name/$repository.
3. Tạo branch, commit, push.
* Brach: 
- Khái niệm: Nhánh là khái niệm rất hay trong Git với nhánh và bạn có thể tách riêng được các tính năng của dự án rồi thử nghiệm những tính năng mới dễ dàng hơn. Hoặc bạn cũng có thể sử dụng nhánh để có thể khắc phục và hoàn chỉnh lỗi bất kỳ nào đó của dự án. 
- Cách tạo một branch: 
 	+ Branch có thể tạo được bằng lệnh branch.
	+ Khi thực hiện lệnh branch mà không chỉ định tham số, thì có thể hiển thị danh sách các branch. Ở đầu có dấu * là branch hiện tại.
* Commit: 
- Khái niệm: Commit là thao tác báo cho hệ thống biết bạn có muốn lưu lại trạng thái hiện hành hay không rồi ghi nhận lại lịch sử các xử lý đã thực hiện như: xóa, cập nhật, thêm các file hoặc thư mục nào đó trên repository.
- Cách tạo một commit: 
	+ Ta sử dụng cú pháp: git commit -m "Ghi chú Commit"
*Push: 
- Khái niệm: Lệnh Push thường được sử dụng để đưa nội dung kho lưu trữ cục bộ lên server và nó cũng là cách bạn chuyển giao các commit từ kho lưu trữ cục bộ lên server. 
- Sau câu lệnh Commit, thông tin mới chỉ được cập nhật lên Local Repository. Nếu bạn muốn cập nhật lên server thì bạn phải sử dụng câu lệnh push:
	git push origin <name_branch>
- Ngoài ra, nếu chưa tồn tại remote trên server thì bạn cần phải add mới một remote trước rồi mới push:
	git remote add origin <remote_url>
	git push origin <name_branch>
4. Git merge, rebase. Phân biệt rebase và merge.
- Git merge: Khi sử dụng merge để tích hợp 2 nhánh với nhau. Câu lệnh merge sẽ lấy snapshot mới nhất của mỗi branch rồi combine với nhau để tạo ra một merge commit. Mỗi khi merge một feature branch về master branch thì nó sẽ tạo ra một merge commit và bỏ vào master branch.
- Git rebase:  Khi chúng ta sử dụng rebase, thì lúc cần tích hợp và nhánh master, nó sẽ đem tất cả các changes từ nhánh feature hay nói cách khác copy tất cả các changes từ nhánh feature đặt lên đầu của master. Cách này có vẻ khá nặng nề, thay vì lấy tất cả các changes từ commit mới nhất của nhánh feature thì nó lại đi chạy từ đâu đến cuối => rewrite. Có thể hiểu là nó sẽ lấy tất cả các commit từ lúc chúng ta tách nhánh feature từ master, rồi đem từng commit đó đặt lên lần lượt lên master theo đúng thứ tự, do đó nên trên cây của master chúng ta có thể thấy được tất cả từng commit trên feature branch thay vì 1 merge commit duy nhất so với cách merge.
- Phân biệt giữa git rebase và git merge: 
	+ Chú ý vào rebase, mọi người sẽ thấy commit của rebase nằm phía trên commit mới nhất của master. Còn ở merge, mọi người sẽ thấy commit của master nằm phía trên commit mới nhất của merge, ngoài ra một commit Merge branch cũng được tạo ra.
	+ Ban sử dụng git rebase nếu như bạn muốn các sự thay đổi thuộc về branch của bạn luôn luôn là mới nhất. Và bạn có thể log một cách có hệ thống dễ nhìn, dễ tracking sao này.
	+ Bạn sử dụng git merge nếu bạn muốn sắp xếp các commit theo mặc định. Bạn không biết về những gì mình làm gì trên branch đó thì dùng merge cho đảm bảo việc tracking sao này có thể tốn nhiều thời gian lần mò.
5. Merge commit.
- Khi bạn code mà thực hiện commit nhiều lần với cùng 1 vấn đề. Thay vì sử dụng lại comment trước đó thì bạn có thể tận dụng lại commit trước đó. Hoặc thực hiện gộp nhiều commit lại.
- Sử dụng lại commit trước đó ta sử dụng -amend
- Gộp nhiều commit thành một ta sử dụng cú pháp: git rebase -i HEAD~3 (trong đó 3 là số lượng commit mà bạn muốn gộp)
6. Git tag, release
* Git tag: 
- Tag là chức năng đặt tên một cách đơn giản của Git, nó cho phép ta xác định một cách rõ ràng các phiên bản mã nguồn (code) của dự án. Ta có thể coi tag như một branch không thay đổi được. Một khi nó được tạo (gắn với 1 commit cụ thể) thì ta không thể thay đổi lịch sử commit ấy được nữa.
- Có 2 loại tag là annotated và lightweight:
	+ Lightweight tag thực chất chỉ là đánh dấu (bookmark) cho một commit, vì chúng chỉ lưu trữ hàm băm (hash) của commit mà chúng tham chiếu. Chúng được tạo chỉ gồm tên mà không có các tùy chọn -a, -s hoặc -m và không chứa bất kỳ thông tin bổ sung nào.
	+ Annotated tag thì mạnh hơn. Ngoài tên nó còn có thể lưu trữ dữ liệu bổ sung như Tên tác giả (-s), tin nhắn (-m: message), và ngày dưới dạng các đối tượng đầy đủ trong cơ sở dữ liệu Git. Tất cả thông tin ấy quan trọng cho việc release dự án của ta.
* Git release:
- Mục đích tạo release là để chia sẻ đóng gói ứng dụng, cùng các ghi chú phát hành và các link tới các file tài liệu ứng dụng cho mọi người trong team, công ty có sửa dụng.
- Các bước tạo: 
	B1: Di chuyển đến trang chủ (main page) của repository trên GitHub mà ta cần tạo release.
	B2: Chọn release* - nút link ngay dưới tên repositry.
	B3: Click chọn Draft a new release.
	B4: Nhập phiên bản cho release của ta. Phiên bản dựa trên Git tag.
	B5: Ngay ô bên phải chọn branch của dự án cần release (drop-down-list)
	B6: Nhập tiêu đề và nội dung cho release này.
	B7: Bạn có thể kéo thả các file tài liệu liên quan cho release phiên bản này lên binaries box.
	B8: Nếu release là không ổn định, chưa chính thức thì ta cần thông báo cho mọi người (liên quan) biết bằng cách chọn This is a pre-release.
	B9: Nếu bạn sẵn sàng công khai bản release này thì click chọn Publish release , bằng không thì chọn Save draft.
7. Git flow.
- git-flow là một tiện ích mở rộng của git, giúp các thao tác trên repository (kho mã nguồn) trở nên dễ dàng và hiệu quả hơn dựa trên mô hình phân nhánh của Vincent Driessen.
- Điểm lợi lớn nhất của Git Flow là giúp việc theo dõi và xử lý các vấn đề nảy sinh do một tính năng, một bản fix rất dễ dàng. Quá trình review sẽ thuận tiện và quan sát được các lỗi nảy sinh trong quá trình deploy.
- Tuy vậy, nếu bạn muốn tăng thời gian triển khai production thì sẽ gặp hạn chế đôi chút về mặt thời gian. Ngoài ra, việc remove các commit không đạt yêu cầu chất lượng cũng khó khăn hơn.
